import mmcv
import numpy as np
import torch

from mmdet3d.models.fusion_layers import VoteFusion


def test_vote_fusion():
    img_meta = {
        'ori_shape': (530, 730, 3),
        'img_shape': (600, 826, 3),
        'pad_shape': (608, 832, 3),
        'scale_factor':
        torch.tensor([1.1315, 1.1321, 1.1315, 1.1321]),
        'flip':
        False,
        'pcd_horizontal_flip':
        False,
        'pcd_vertical_flip':
        False,
        'pcd_trans':
        torch.tensor([0., 0., 0.]),
        'pcd_scale_factor':
        1.0308290128214932,
        'pcd_rotation':
        torch.tensor([[0.9747, 0.2234, 0.0000], [-0.2234, 0.9747, 0.0000],
                      [0.0000, 0.0000, 1.0000]]),
        'transformation_3d_pipeline':
        'HRST'
    }
    calibs = {
        'Rt':
        torch.tensor([[[0.9796, 0.0480, -0.1953], [0.0480, 0.8875, 0.4584],
                       [0.1953, -0.4584, 0.8670]]]),
        'K':
        torch.tensor([[[529.5000, 0.0000, 365.0000],
                       [0.0000, 529.5000, 265.0000], [0.0000, 0.0000,
                                                      1.0000]]])
    }
    bboxes = torch.tensor([[[
        2.0080e+01, 1.2850e+02, 2.6498e+02, 5.1645e+02, 9.9332e-01, 3.0000e+00
    ], [
        9.5360e+01, 6.3060e+01, 2.3481e+02, 2.7576e+02, 9.8230e-01, 3.0000e+00
    ], [
        3.7816e+02, 7.4130e+01, 4.5042e+02, 1.4193e+02, 9.7215e-01, 3.0000e+00
    ], [
        3.0362e+02, 6.9880e+01, 3.6850e+02, 1.5075e+02, 9.3166e-01, 3.0000e+00
    ], [
        2.2672e+02, 6.7760e+01, 3.3754e+02, 1.6671e+02, 9.1281e-01, 3.0000e+00
    ], [
        1.3093e+02, 1.3429e+02, 6.3464e+02, 4.2356e+02, 8.8204e-01, 1.0000e+00
    ], [
        4.7115e+02, 8.8110e+01, 5.4814e+02, 1.4772e+02, 7.1313e-01, 3.0000e+00
    ], [
        2.2225e+02, 6.3610e+01, 3.5835e+02, 2.4900e+02, 5.8030e-01, 3.0000e+00
    ], [
        4.8527e+02, 9.1240e+01, 5.7226e+02, 1.6390e+02, 5.7448e-01, 3.0000e+00
    ], [
        5.2282e+02, 9.1730e+01, 5.9655e+02, 1.7784e+02, 5.2803e-01, 3.0000e+00
    ], [
        4.7903e+02, 9.5580e+01, 5.7986e+02, 2.1245e+02, 4.0795e-01, 3.0000e+00
    ], [
        3.1581e+02, 7.4040e+01, 4.1581e+02, 1.4678e+02, 3.7878e-01, 3.0000e+00
    ], [
        4.6463e+02, 8.2250e+01, 5.4283e+02, 2.0017e+02, 3.3833e-01, 3.0000e+00
    ], [
        6.5956e+02, 1.4969e+02, 7.2969e+02, 2.5769e+02, 3.0805e-01, 3.0000e+00
    ], [
        3.0074e+02, 6.1070e+01, 3.8533e+02, 2.2778e+02, 2.8425e-01, 3.0000e+00
    ], [
        2.5928e+02, 6.5340e+01, 3.7402e+02, 1.9477e+02, 2.8052e-01, 3.0000e+00
    ], [
        3.6904e+02, 7.2920e+01, 4.6152e+02, 2.2193e+02, 2.6395e-01, 3.0000e+00
    ], [
        1.0810e+01, 1.2801e+02, 1.7760e+02, 3.5542e+02, 1.7511e-01, 3.0000e+00
    ], [
        5.2241e+02, 1.0825e+02, 6.1123e+02, 2.2297e+02, 1.5300e-01, 3.0000e+00
    ], [
        5.6530e+01, 8.4800e+01, 1.9335e+02, 2.9086e+02, 1.4847e-01, 3.0000e+00
    ]]])
    seeds_3d = torch.tensor([[[0.0445, 1.6755, -1.5318],
                              [2.5006, 7.2387, -0.7377],
                              [-0.6000, 4.8277, -0.0840],
                              [1.3962, 3.9945, -1.5512],
                              [-2.0547, 2.0128, -0.3575]]])
    expected_tensor2 = torch.tensor([[
        False, False, False, False, False, False, False, True, False, False,
        True, True, False, True, False
    ]])
    expected_tensor1 = torch.tensor(
        [[[
            -0.0000, -0.0000, -0.0000, -0.0000, 0.0000, -0.0000, -0.0000,
            0.7718, -0.0000, -0.0000, 0.2302, -0.7287, -0.0000, -1.0655, 0.0000
        ],
          [
              0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
              -0.7406, -0.0000, -0.0000, -0.2753, -0.8041, -0.0000, -1.7159,
              0.0000
          ],
          [
              -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
              -0.0860, -0.0000, -0.0000, -0.4934, -0.0860, -0.0000, -0.0860,
              -0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.8850,
              0.0000, 0.0000, 0.6560, 0.8850, 0.0000, 0.8850, 0.0000
          ],
          [
              -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000, -0.0000,
              -0.4576, -0.0000, -0.0000, -0.5712, -0.4576, -0.0000, -0.4576,
              -0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.9991, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.2441,
              0.0000, 0.0000, 0.0000, 0.2441, 0.0000, 0.2441, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
              0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000
          ],
          [
              2.3163e-03, -1.9483e-03, -3.6944e-03, 2.1762e-04, -3.8826e-03,
              -1.9015e-03, -3.3550e-03, -1.7746e-03, -6.9815e-04, -3.8868e-03,
              -1.3022e-03, -1.1899e-03, 2.5410e-03, -1.8349e-03, 1.0320e-03
          ],
          [
              2.3163e-03, -1.9483e-03, -3.6944e-03, 2.1762e-04, -3.8826e-03,
              -1.9015e-03, -3.3550e-03, -1.7746e-03, -6.9815e-04, -3.8868e-03,
              -1.3022e-03, -1.1899e-03, 2.5410e-03, -1.8349e-03, 1.0320e-03
          ],
          [
              2.3163e-03, -1.9483e-03, -3.6944e-03, 2.1762e-04, -3.8826e-03,
              -1.9015e-03, -3.3550e-03, -1.7746e-03, -6.9815e-04, -3.8868e-03,
              -1.3022e-03, -1.1899e-03, 2.5410e-03, -1.8349e-03, 1.0320e-03
          ]]])

    #  [-0.2844, -0.1080,  0.1391, -0.0374,  0.4803,  0.0136,  0.2724,
    #    0.1156,  0.2136, -0.0609,  0.1116,  0.5509,  0.3038, -0.1472,
    #    0.0567],
    #  [-0.3031, -0.1619,  0.1087,  0.0460,  0.4420,  0.1048,  0.2773,
    #    0.0773,  0.2224, -0.0678,  0.1087,  0.5048,  0.2969, -0.1619,
    #    0.0773],
    #  [-0.2654, -0.1830,  0.0836,  0.1072,  0.3542,  0.1346,  0.2287,
    #    0.0483,  0.1581,  0.0366,  0.1856,  0.4601,  0.2993, -0.1360,
    #    0.1621]
    # imgs =
    fusion = VoteFusion(img_norm_cfg={'mean': []})
    imgs = torch.linspace(
        -1, 1, steps=608 * 832).reshape(1, 608, 832).repeat(3, 1, 1)[None]
    out1, out2 = fusion(imgs, bboxes, seeds_3d, [img_meta], calibs)
    assert torch.allclose(expected_tensor1, out1, 1e-3)
    assert torch.eq(expected_tensor2, out2)


# test_vote_fusion()
# exit()

snap = mmcv.load('./work_dirs/snap.pkl')

fusion = VoteFusion(img_norm_cfg={'mean': []})
calibs = {
    'Rt': torch.from_numpy(snap['calib_rt']).cuda().float(),
    'K': torch.from_numpy(snap['calib_k']).cuda().float()
}
imgs = torch.from_numpy(snap['img']).cuda()
# imgs = torch.linspace(-608*832, 608*832, steps=608*832)
# .reshape(1, 608, 832).repeat(3, 1, 1).cuda()[None]
bboxes_2d_rescaled = torch.from_numpy(snap['bbox_2d']).cuda()[:, :20]
print(bboxes_2d_rescaled)
seeds_3d = torch.from_numpy(snap['seeds_3d']).cuda()
print(seeds_3d[:, :5])
img_metas = {}
for k in snap.keys():
    if k in ['img', 'bbox_2d', 'seeds_3d']:
        continue
    if type(snap[k]) == np.ndarray:
        img_metas.update({k: torch.from_numpy(snap[k]).cuda()})
    else:
        img_metas.update({k: snap[k]})
img_metas['transformation_3d_pipeline'] = 'HRST'

print(imgs.shape, bboxes_2d_rescaled.shape, seeds_3d.shape)
print(img_metas)
print(calibs)
out1, out2 = fusion(imgs, bboxes_2d_rescaled, seeds_3d, [img_metas], calibs)
print(out1[:, :, 0:15].transpose(2, 1), )

print(torch.from_numpy(snap['img_features'][:, :, 0:15]).transpose(2, 1))
print(snap['masks'][:, :15])
print(snap['img_features'].shape)
print(out2[:, :15])
# print(snap['img_features'][:, :, 0:5])
# print(snap['img_features'][:, :, 5:10])
# print(snap['img_features'][:, :, 10:15])

print(snap.keys())
# print(out1[:, :, 0:15])
